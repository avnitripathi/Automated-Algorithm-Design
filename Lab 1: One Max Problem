#First, import modules
import random
from deap import base
from deap import creator
from deap import tools

#Then, define fitness objective + classes
#define name of class, inherited class, and objective

#In FitnessMax, define tuple with single objective that needs to be maxmimized
creator.create("FitnessMax", base.Fitness, weights = (1.0,))
#Similarly, Individual class is a list with objective to create a max fitness
creator.create("Individual", list, fitness = creator.FitnessMax)

#Define functions available to genetic algorithms
toolbox = base.Toolbox()
#generates attributes; attr_bool is a random generator producing either 0 or 1
toolbox.register("attr_bool", random.randint, 0, 1)
#Initialize Structure
#calling on toolbox.individual generates an instance of creator.Individual with 100 0's/1's
#InitRepeat  taks 3 arguments: container, function to fill container, number of times to call the function
toolbox.register("individual", tools.initRepeat, creator.Individual, toolbox.attr_bool, 100)
#defines population as list of individuals
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

#define function to evaluate fitness objective (returns sum of boolean integers)
def evalOneMax(individual):
    return sum(individual),

#define genetic algorithms genetic operators
toolbox.register("evaluate", evalOneMax)
#defines mate as a two point crossover function
toolbox.register("mate", tools.cxTwoPoint)
#mutate flips a bit in bitstring with 5% probability of flipping each bit 
toolbox.register("mutate", tools.mutFlipBit, indpb = 0.05)
#tournament selection of 3 individuals, helps preserve more varied traits
toolbox.register("select", tools.selTournament, tournsize = 3)

#define main genetic algorithm; initialize population with 300 indiviuals in line above, n is parameter left empty when defining population
def main():
    print("in main")
    pop = toolbox.population(n = 300)
    
    #evaluate the population
    fitnesses = list(map(toolbox.evaluate, pop))
    #maps evaluation function to population + assign individual respective fitness values
    for ind, fit in zip(pop, fitnesses):
        ind.fitness.values = fit
    
    #begin evolution
    #define evolutionary loop and set algorithm to run for 40 generations
    for g in range(40):
        print ("-- Generation %i --" % g)
        #select next generation individual using tournament selection
        offspring = toolbox.select(pop, len(pop))
        #clone selected individuals to ensure offspring are a seperate instance
        offspring = list(map(toolbox.clone, offspring))
        
        #apply crossover and mutation on offspring
        #mates individual with 50% probability and mutates with 20% probability
        #delete invalidates fitness of mated + mutated offspring
        for child1, child2 in zip(offspring[::2], offspring[1::2]):
            if random.random() < 0.5:
                toolbox.mate(child1, child2)
                del child1.fitness.values
                del child2.fitness.values
        for mutant in offspring:
            if random.random() < 0.2:
                toolbox.mutate(mutant)
                del mutant.fitness.values
        
        #reevaluate modified offspring and replace old population with offspring
        invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
        fitnesses = map(toolbox.evaluate, invalid_ind)
        for ind, fit in zip(invalid_ind, fitnesses):
            ind.fitness.values = fit
        #replace population
        pop[:] = offspring
        
        #gathers all fitnesses in one list and print stats
        fits = [ind.fitness.values[0] for ind in pop]
        
        length = len(pop)
        mean = sum(fits) / length
        sum2 = sum(x*x for x in fits)
        std = abs(sum2 / length - mean **2) ** 0.5
        
        print("  Min %s" % min(fits))
        print("  Max %s" % max(fits))
        print("  Avg %s" % mean)
        print("  Std %s" % std)
        
    print("-- End of (successful) evolution --")
    
    best_ind = tools.selBest(pop, 1)[0]
    print("Best individual is %s, %s" % (best_ind, best_ind.fitness.values))
main()
        
